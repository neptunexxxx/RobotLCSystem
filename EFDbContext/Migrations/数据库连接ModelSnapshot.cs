// <auto-generated />
using System;
using EFDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EFDbContext.Migrations
{
    [DbContext(typeof(数据库连接))]
    partial class 数据库连接ModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EFDbContext.Entity.Alarmlog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("dataId")
                        .HasColumnType("uuid");

                    b.Property<string>("requestTime")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("alarmlog");
                });

            modelBuilder.Entity("EFDbContext.Entity.AlarmlogData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("alarmId")
                        .HasColumnType("integer");

                    b.Property<string>("alarmMesg")
                        .HasColumnType("text");

                    b.Property<int?>("alarmState")
                        .HasColumnType("integer");

                    b.Property<string>("createBy")
                        .HasColumnType("text");

                    b.Property<string>("createTime")
                        .HasColumnType("text");

                    b.Property<Guid?>("dataId")
                        .HasColumnType("uuid");

                    b.Property<string>("endTime")
                        .HasColumnType("text");

                    b.Property<string>("factoryCode")
                        .HasColumnType("text");

                    b.Property<string>("lineCode")
                        .HasColumnType("text");

                    b.Property<string>("machineCode")
                        .HasColumnType("text");

                    b.Property<string>("startTime")
                        .HasColumnType("text");

                    b.Property<string>("stationCode")
                        .HasColumnType("text");

                    b.Property<string>("updateBy")
                        .HasColumnType("text");

                    b.Property<string>("updateTime")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("alarmlog_data");
                });

            modelBuilder.Entity("EFDbContext.Entity.BadInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("dataId")
                        .HasColumnType("uuid");

                    b.Property<string>("requestTime")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("bad_information");
                });

            modelBuilder.Entity("EFDbContext.Entity.BadInformationData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("dataId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("datalistId")
                        .HasColumnType("uuid");

                    b.Property<string>("lineCode")
                        .HasColumnType("text");

                    b.Property<string>("materialCode")
                        .HasColumnType("text");

                    b.Property<string>("materialName")
                        .HasColumnType("text");

                    b.Property<string>("materialVersion")
                        .HasColumnType("text");

                    b.Property<string>("operationCode")
                        .HasColumnType("text");

                    b.Property<string>("requestTime")
                        .HasColumnType("text");

                    b.Property<string>("snNumber")
                        .HasColumnType("text");

                    b.Property<string>("stationCode")
                        .HasColumnType("text");

                    b.Property<string>("userId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("bad_information_data");
                });

            modelBuilder.Entity("EFDbContext.Entity.BadInformationDataList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("badCode")
                        .HasColumnType("text");

                    b.Property<string>("badFactor")
                        .HasColumnType("text");

                    b.Property<string>("badQty")
                        .HasColumnType("text");

                    b.Property<Guid?>("datalistId")
                        .HasColumnType("uuid");

                    b.Property<string>("editTime")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("bad_information_datalist");
                });

            modelBuilder.Entity("EFDbContext.Entity.DeviceStatusAndDuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("acquisitCode")
                        .HasColumnType("text");

                    b.Property<string>("curRunningDuration")
                        .HasColumnType("text");

                    b.Property<string>("machineCode")
                        .HasColumnType("text");

                    b.Property<string>("machineStatusCode")
                        .HasColumnType("text");

                    b.Property<string>("requestTime")
                        .HasColumnType("text");

                    b.Property<string>("timeUnit")
                        .HasColumnType("text");

                    b.Property<string>("totalRunningDuration")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("device_status_and_duration");
                });

            modelBuilder.Entity("EFDbContext.Entity.EquipmentStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("lineCode")
                        .HasColumnType("text");

                    b.Property<string>("machineCode")
                        .HasColumnType("text");

                    b.Property<string>("machineStatusBegin")
                        .HasColumnType("text");

                    b.Property<string>("machineStatusCode")
                        .HasColumnType("text");

                    b.Property<string>("machineStatusEnd")
                        .HasColumnType("text");

                    b.Property<string>("stationCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("equipment_status");
                });

            modelBuilder.Entity("EFDbContext.Entity.ExceptionBindingInformation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("exceptionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("exceptionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("snNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("time")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("exception_binding_information");
                });

            modelBuilder.Entity("EFDbContext.Entity.Inspection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("dataId")
                        .HasColumnType("uuid");

                    b.Property<string>("requestTime")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("inspection");
                });

            modelBuilder.Entity("EFDbContext.Entity.InspectionData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("checkEndTime")
                        .HasColumnType("text");

                    b.Property<string>("checkStartTime")
                        .HasColumnType("text");

                    b.Property<Guid?>("dataId")
                        .HasColumnType("uuid");

                    b.Property<string>("lineCode")
                        .HasColumnType("text");

                    b.Property<string>("materialCode")
                        .HasColumnType("text");

                    b.Property<string>("materialName")
                        .HasColumnType("text");

                    b.Property<string>("materialVersion")
                        .HasColumnType("text");

                    b.Property<string>("operationCode")
                        .HasColumnType("text");

                    b.Property<string>("paramCode")
                        .HasColumnType("text");

                    b.Property<string>("paramName")
                        .HasColumnType("text");

                    b.Property<string>("paramRange1")
                        .HasColumnType("text");

                    b.Property<string>("paramRange2")
                        .HasColumnType("text");

                    b.Property<string>("realValue")
                        .HasColumnType("text");

                    b.Property<string>("snNumber")
                        .HasColumnType("text");

                    b.Property<string>("standardValue")
                        .HasColumnType("text");

                    b.Property<string>("stationCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("inspection_data");
                });

            modelBuilder.Entity("EFDbContext.Entity.MaterialBind", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("dataId")
                        .HasColumnType("uuid");

                    b.Property<string>("materialBarcode")
                        .HasColumnType("text");

                    b.Property<string>("materialCode")
                        .HasColumnType("text");

                    b.Property<string>("materialCodeVersion")
                        .HasColumnType("text");

                    b.Property<string>("requestTime")
                        .HasColumnType("text");

                    b.Property<string>("snNumber")
                        .HasColumnType("text");

                    b.Property<string>("stationCode")
                        .HasColumnType("text");

                    b.Property<string>("userId")
                        .HasColumnType("text");

                    b.Property<string>("workOrderNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("material_bind");
                });

            modelBuilder.Entity("EFDbContext.Entity.MaterialBindData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("assemblyMaterialCode")
                        .HasColumnType("text");

                    b.Property<string>("assemblyMaterialName")
                        .HasColumnType("text");

                    b.Property<string>("assemblyMaterialQty")
                        .HasColumnType("text");

                    b.Property<string>("assemblyMaterialSn")
                        .HasColumnType("text");

                    b.Property<string>("assemblyMaterialVersion")
                        .HasColumnType("text");

                    b.Property<string>("assemblySort")
                        .HasColumnType("text");

                    b.Property<string>("assemblyTime")
                        .HasColumnType("text");

                    b.Property<Guid?>("dataId")
                        .HasColumnType("uuid");

                    b.Property<string>("lineCode")
                        .HasColumnType("text");

                    b.Property<string>("orderCode")
                        .HasColumnType("text");

                    b.Property<string>("scheduleCode")
                        .HasColumnType("text");

                    b.Property<string>("snNumber")
                        .HasColumnType("text");

                    b.Property<string>("stationCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("material_bind_data");
                });

            modelBuilder.Entity("EFDbContext.Entity.MaterialBindInfo", b =>
                {
                    b.Property<string>("物料名称")
                        .HasColumnType("text");

                    b.Property<bool?>("是否使用")
                        .HasColumnType("boolean");

                    b.Property<string>("正则表达式")
                        .HasColumnType("text");

                    b.HasKey("物料名称");

                    b.ToTable("material_bind_info");
                });

            modelBuilder.Entity("EFDbContext.Entity.MaterialTracePassStation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("dataId")
                        .HasColumnType("uuid");

                    b.Property<string>("inStationTime")
                        .HasColumnType("text");

                    b.Property<string>("lineCode")
                        .HasColumnType("text");

                    b.Property<string>("materialCode")
                        .HasColumnType("text");

                    b.Property<string>("operationCode")
                        .HasColumnType("text");

                    b.Property<string>("orderNumber")
                        .HasColumnType("text");

                    b.Property<string>("outStationTime")
                        .HasColumnType("text");

                    b.Property<string>("passStatus")
                        .HasColumnType("text");

                    b.Property<string>("scheduleCode")
                        .HasColumnType("text");

                    b.Property<string>("snNumber")
                        .HasColumnType("text");

                    b.Property<string>("startStationCode")
                        .HasColumnType("text");

                    b.Property<string>("stationCode")
                        .HasColumnType("text");

                    b.Property<string>("userId")
                        .HasColumnType("text");

                    b.Property<string>("userName")
                        .HasColumnType("text");

                    b.Property<string>("workReportQty")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("material_trace_passStation");
                });

            modelBuilder.Entity("EFDbContext.Entity.MaterialTracePassStationData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("acquisitionTime")
                        .HasColumnType("text");

                    b.Property<string>("barCode")
                        .HasColumnType("text");

                    b.Property<Guid?>("dataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("material_trace_passStation_data");
                });

            modelBuilder.Entity("EFDbContext.Entity.PassStation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("barCode")
                        .HasColumnType("text");

                    b.Property<string>("materialCode")
                        .HasColumnType("text");

                    b.Property<string>("passBeginTime")
                        .HasColumnType("text");

                    b.Property<string>("passEndTime")
                        .HasColumnType("text");

                    b.Property<string>("passNum")
                        .HasColumnType("text");

                    b.Property<string>("reqType")
                        .HasColumnType("text");

                    b.Property<string>("requestTime")
                        .HasColumnType("text");

                    b.Property<string>("scheduleNumber")
                        .HasColumnType("text");

                    b.Property<int?>("snBindState")
                        .HasColumnType("integer");

                    b.Property<string>("snNumber")
                        .HasColumnType("text");

                    b.Property<string>("startStationCode")
                        .HasColumnType("text");

                    b.Property<string>("state")
                        .HasColumnType("text");

                    b.Property<string>("stationCode")
                        .HasColumnType("text");

                    b.Property<string>("trayNumber")
                        .HasColumnType("text");

                    b.Property<string>("userId")
                        .HasColumnType("text");

                    b.Property<string>("workOrderNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("pass_station");
                });

            modelBuilder.Entity("EFDbContext.Entity.ProductParameters", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("dataId")
                        .HasColumnType("uuid");

                    b.Property<string>("lineCode")
                        .HasColumnType("text");

                    b.Property<string>("machineCode")
                        .HasColumnType("text");

                    b.Property<string>("materialCode")
                        .HasColumnType("text");

                    b.Property<string>("materialName")
                        .HasColumnType("text");

                    b.Property<string>("materialVersion")
                        .HasColumnType("text");

                    b.Property<string>("paramTime")
                        .HasColumnType("text");

                    b.Property<string>("snNumber")
                        .HasColumnType("text");

                    b.Property<string>("stationCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("product_parameters");
                });

            modelBuilder.Entity("EFDbContext.Entity.ProductParametersData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("checkResult")
                        .HasColumnType("text");

                    b.Property<Guid?>("dataId")
                        .HasColumnType("uuid");

                    b.Property<string>("paramCode")
                        .HasColumnType("text");

                    b.Property<string>("paramName")
                        .HasColumnType("text");

                    b.Property<string>("paramRange1")
                        .HasColumnType("text");

                    b.Property<string>("paramRange2")
                        .HasColumnType("text");

                    b.Property<string>("realValue")
                        .HasColumnType("text");

                    b.Property<string>("standardValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("product_parameters_data");
                });

            modelBuilder.Entity("EFDbContext.Entity.RealTimeEquipmentStatus", b =>
                {
                    b.Property<string>("machineCode")
                        .HasColumnType("text");

                    b.Property<string>("curFaultDuration")
                        .HasColumnType("text");

                    b.Property<string>("machineStatusBegin")
                        .HasColumnType("text");

                    b.Property<string>("machineStatusCode")
                        .HasColumnType("text");

                    b.Property<string>("machineStatusEnd")
                        .HasColumnType("text");

                    b.Property<string>("totalOnLineDuration")
                        .HasColumnType("text");

                    b.Property<string>("totalRunningDuration")
                        .HasColumnType("text");

                    b.HasKey("machineCode");

                    b.ToTable("real_time_equipment_status");
                });

            modelBuilder.Entity("EFDbContext.Entity.RealTimeProductInfo", b =>
                {
                    b.Property<string>("snNumber")
                        .HasColumnType("text");

                    b.Property<bool?>("isbad")
                        .HasColumnType("boolean");

                    b.Property<string>("lineCode")
                        .HasColumnType("text");

                    b.Property<string>("materialCode")
                        .HasColumnType("text");

                    b.Property<string>("ngStation")
                        .HasColumnType("text");

                    b.Property<string>("operationCode")
                        .HasColumnType("text");

                    b.Property<string>("passBeginTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("passEndTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("reProductCount")
                        .HasColumnType("integer");

                    b.Property<string>("scheduleCode")
                        .HasColumnType("text");

                    b.Property<string>("stationCode")
                        .HasColumnType("text");

                    b.Property<string>("updateTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("virtualSN")
                        .HasColumnType("text");

                    b.HasKey("snNumber");

                    b.ToTable("real_time_product_info");
                });

            modelBuilder.Entity("EFDbContext.Entity.SNCreate", b =>
                {
                    b.Property<string>("snNumber")
                        .HasColumnType("text");

                    b.Property<string>("factoryCode")
                        .HasColumnType("text");

                    b.Property<string>("lineCode")
                        .HasColumnType("text");

                    b.Property<string>("materialCode")
                        .HasColumnType("text");

                    b.Property<string>("requestTime")
                        .HasColumnType("text");

                    b.Property<string>("scheduleCode")
                        .HasColumnType("text");

                    b.Property<string>("stationCode")
                        .HasColumnType("text");

                    b.Property<string>("userId")
                        .HasColumnType("text");

                    b.HasKey("snNumber");

                    b.ToTable("sn_create");
                });

            modelBuilder.Entity("EFDbContext.Entity.ScheduleInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("endTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("scheduleCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("scheduleQty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("scheduleStatusCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("startTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("schedule_info");
                });

            modelBuilder.Entity("EFDbContext.Entity.StationTempo", b =>
                {
                    b.Property<string>("StationCode")
                        .HasColumnType("text");

                    b.Property<float>("AverageTempo")
                        .HasColumnType("real");

                    b.Property<int>("MachineTempo")
                        .HasColumnType("integer");

                    b.Property<int>("TempoCount")
                        .HasColumnType("integer");

                    b.Property<int>("TheoreticalTempo")
                        .HasColumnType("integer");

                    b.HasKey("StationCode");

                    b.ToTable("station_tempo");
                });

            modelBuilder.Entity("EFDbContext.Entity.Warning", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("dataId")
                        .HasColumnType("uuid");

                    b.Property<string>("requestTime")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("warning");
                });

            modelBuilder.Entity("EFDbContext.Entity.WarningData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("dataId")
                        .HasColumnType("uuid");

                    b.Property<string>("lineCode")
                        .HasColumnType("text");

                    b.Property<string>("machineCode")
                        .HasColumnType("text");

                    b.Property<string>("message")
                        .HasColumnType("text");

                    b.Property<string>("requestTime")
                        .HasColumnType("text");

                    b.Property<string>("stationCode")
                        .HasColumnType("text");

                    b.Property<string>("unusualAlarmCode")
                        .HasColumnType("text");

                    b.Property<string>("workShopCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("warning_data");
                });

            modelBuilder.Entity("EFDbContext.Entity.用户类", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("备注")
                        .HasColumnType("text");

                    b.Property<string>("密码")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("权限")
                        .HasColumnType("text");

                    b.Property<string>("用户名")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("用户");
                });

            modelBuilder.Entity("EFDbContext.Entity.系统设置类", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("值")
                        .HasColumnType("text");

                    b.Property<string>("参数名")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("设置");
                });
#pragma warning restore 612, 618
        }
    }
}
